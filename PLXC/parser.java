
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\011" +
    "\000\002\004\004\000\002\004\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\011\000\002\004\007\000\002" +
    "\004\007\000\002\006\005\000\002\006\005\000\002\007" +
    "\005\000\002\007\003\000\002\010\007\000\002\010\006" +
    "\000\002\010\006\000\002\010\005\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\006\000\002\005\004\000\002\005\005\000\002\005" +
    "\006\000\002\005\006\000\002\005\010\000\002\005\010" +
    "\000\002\005\007\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\005" +
    "\000\002\005\004\000\002\011\003\000\002\011\005\000" +
    "\002\011\005\000\002\011\007\000\002\011\006\000\002" +
    "\012\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\007\000\002\013\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\007\000\002\014\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\007\000\002\014\006\000\002" +
    "\014\012\000\002\015\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\007\000\002\015\006\000\002\016\005" +
    "\000\002\016\003\000\002\017\005\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\066\004\021\005\022\012\012\013\024\014" +
    "\035\016\031\023\004\033\014\034\013\041\037\043\016" +
    "\044\033\045\005\046\040\047\007\050\011\051\027\052" +
    "\026\053\025\054\006\055\023\056\036\057\034\060\010" +
    "\061\017\062\030\001\002\000\052\005\022\023\004\033" +
    "\014\041\037\043\016\044\033\045\005\046\040\047\007" +
    "\050\011\051\027\052\026\053\025\054\006\055\023\056" +
    "\036\057\034\060\010\061\017\062\030\001\002\000\052" +
    "\005\022\023\004\033\014\041\037\043\016\044\033\045" +
    "\005\046\040\047\007\050\011\051\027\052\026\053\025" +
    "\054\006\055\023\056\036\057\034\060\010\061\017\062" +
    "\030\001\002\000\052\006\uffd3\007\257\010\uffd3\015\uffd3" +
    "\020\uffd3\021\256\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\260\027\uffd3\030\uffd3\031\uffd3\032\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\042\uffd3\001\002\000\004\054\244\001" +
    "\002\000\044\006\uffe9\010\uffe9\015\uffe9\020\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\042\uffe9\001\002" +
    "\000\004\054\221\001\002\000\004\005\215\001\002\000" +
    "\066\004\021\005\022\012\012\013\024\014\035\016\031" +
    "\023\004\033\014\034\013\041\037\043\016\044\033\045" +
    "\005\046\040\047\007\050\011\051\027\052\026\053\025" +
    "\054\006\055\023\056\036\057\034\060\010\061\017\062" +
    "\030\001\002\000\052\005\022\023\004\033\014\041\037" +
    "\043\016\044\033\045\005\046\040\047\007\050\011\051" +
    "\027\052\026\053\025\054\006\055\023\056\036\057\034" +
    "\060\010\061\017\062\030\001\002\000\004\002\211\001" +
    "\002\000\052\005\022\023\004\033\014\041\037\043\016" +
    "\044\033\045\005\046\040\047\007\050\011\051\027\052" +
    "\026\053\025\054\006\055\023\056\036\057\034\060\010" +
    "\061\017\062\030\001\002\000\044\006\uffca\010\uffca\015" +
    "\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025\uffca\027\uffca" +
    "\030\uffca\031\uffca\032\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\042\uffca\001\002\000\032\015\207\020\054\022\050" +
    "\023\045\024\053\025\047\027\052\030\046\031\044\032" +
    "\051\036\043\037\055\001\002\000\004\005\172\001\002" +
    "\000\052\005\022\023\004\033\014\041\037\043\016\044" +
    "\033\045\005\046\040\047\007\050\011\051\027\052\026" +
    "\053\025\054\006\055\023\056\036\057\034\060\010\061" +
    "\017\062\030\001\002\000\044\006\uffec\010\uffec\015\uffec" +
    "\020\uffec\022\uffec\023\uffec\024\uffec\025\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\042\uffec\001\002\000\066\004\021\005\022\012\012\013" +
    "\024\014\035\016\031\023\004\033\014\034\013\041\037" +
    "\043\016\044\033\045\005\046\040\047\007\050\011\051" +
    "\027\052\026\053\025\054\006\055\023\056\036\057\034" +
    "\060\010\061\017\062\030\001\002\000\004\054\153\001" +
    "\002\000\004\054\143\001\002\000\004\054\130\001\002" +
    "\000\044\006\uffc9\010\uffc9\015\uffc9\020\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9\001\002\000" +
    "\004\005\113\001\002\000\070\002\001\004\021\005\022" +
    "\012\012\013\024\014\035\016\031\023\004\033\014\034" +
    "\013\041\037\043\016\044\033\045\005\046\040\047\007" +
    "\050\011\051\027\052\026\053\025\054\006\055\023\056" +
    "\036\057\034\060\010\061\017\062\030\001\002\000\052" +
    "\005\022\023\004\033\014\041\037\043\016\044\033\045" +
    "\005\046\040\047\007\050\011\051\027\052\026\053\025" +
    "\054\006\055\023\056\036\057\034\060\010\061\017\062" +
    "\030\001\002\000\044\006\uffea\010\uffea\015\uffea\020\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea" +
    "\001\002\000\004\005\074\001\002\000\044\006\uffeb\010" +
    "\uffeb\015\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\001\002\000\052\005\022\023\004" +
    "\033\014\041\037\043\016\044\033\045\005\046\040\047" +
    "\007\050\011\051\027\052\026\053\025\054\006\055\023" +
    "\056\036\057\034\060\010\061\017\062\030\001\002\000" +
    "\052\005\022\023\004\033\014\041\037\043\016\044\033" +
    "\045\005\046\040\047\007\050\011\051\027\052\026\053" +
    "\025\054\006\055\023\056\036\057\034\060\010\061\017" +
    "\062\030\001\002\000\072\002\ufffe\004\ufffe\005\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\016\ufffe\023\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\041\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002\000" +
    "\044\006\uffe0\010\uffe0\015\uffe0\020\054\022\050\023\045" +
    "\024\053\025\047\027\052\030\046\031\044\032\051\035" +
    "\uffe0\036\043\037\055\040\uffe0\042\uffe0\001\002\000\052" +
    "\005\022\023\004\033\014\041\037\043\016\044\033\045" +
    "\005\046\040\047\007\050\011\051\027\052\026\053\025" +
    "\054\006\055\023\056\036\057\034\060\010\061\017\062" +
    "\030\001\002\000\052\005\022\023\004\033\014\041\037" +
    "\043\016\044\033\045\005\046\040\047\007\050\011\051" +
    "\027\052\026\053\025\054\006\055\023\056\036\057\034" +
    "\060\010\061\017\062\030\001\002\000\052\005\022\023" +
    "\004\033\014\041\037\043\016\044\033\045\005\046\040" +
    "\047\007\050\011\051\027\052\026\053\025\054\006\055" +
    "\023\056\036\057\034\060\010\061\017\062\030\001\002" +
    "\000\052\005\022\023\004\033\014\041\037\043\016\044" +
    "\033\045\005\046\040\047\007\050\011\051\027\052\026" +
    "\053\025\054\006\055\023\056\036\057\034\060\010\061" +
    "\017\062\030\001\002\000\052\005\022\023\004\033\014" +
    "\041\037\043\016\044\033\045\005\046\040\047\007\050" +
    "\011\051\027\052\026\053\025\054\006\055\023\056\036" +
    "\057\034\060\010\061\017\062\030\001\002\000\052\005" +
    "\022\023\004\033\014\041\037\043\016\044\033\045\005" +
    "\046\040\047\007\050\011\051\027\052\026\053\025\054" +
    "\006\055\023\056\036\057\034\060\010\061\017\062\030" +
    "\001\002\000\052\005\022\023\004\033\014\041\037\043" +
    "\016\044\033\045\005\046\040\047\007\050\011\051\027" +
    "\052\026\053\025\054\006\055\023\056\036\057\034\060" +
    "\010\061\017\062\030\001\002\000\052\005\022\023\004" +
    "\033\014\041\037\043\016\044\033\045\005\046\040\047" +
    "\007\050\011\051\027\052\026\053\025\054\006\055\023" +
    "\056\036\057\034\060\010\061\017\062\030\001\002\000" +
    "\052\005\022\023\004\033\014\041\037\043\016\044\033" +
    "\045\005\046\040\047\007\050\011\051\027\052\026\053" +
    "\025\054\006\055\023\056\036\057\034\060\010\061\017" +
    "\062\030\001\002\000\052\005\022\023\004\033\014\041" +
    "\037\043\016\044\033\045\005\046\040\047\007\050\011" +
    "\051\027\052\026\053\025\054\006\055\023\056\036\057" +
    "\034\060\010\061\017\062\030\001\002\000\052\005\022" +
    "\023\004\033\014\041\037\043\016\044\033\045\005\046" +
    "\040\047\007\050\011\051\027\052\026\053\025\054\006" +
    "\055\023\056\036\057\034\060\010\061\017\062\030\001" +
    "\002\000\044\006\uffc8\010\uffc8\015\uffc8\020\054\022\050" +
    "\023\045\024\053\025\047\027\052\030\046\031\044\032" +
    "\051\035\uffc8\036\043\037\055\040\uffc8\042\uffc8\001\002" +
    "\000\044\006\uffd0\010\uffd0\015\uffd0\020\uffd0\022\050\023" +
    "\045\024\053\025\047\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\001\002\000" +
    "\044\006\uffdc\010\uffdc\015\uffdc\020\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\001\002\000\044" +
    "\006\uffcd\010\uffcd\015\uffcd\020\uffcd\022\050\023\045\024" +
    "\053\025\047\027\uffcd\030\uffcd\031\uffcd\032\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\042\uffcd\001\002\000\044\006" +
    "\uffcc\010\uffcc\015\uffcc\020\uffcc\022\050\023\045\024\053" +
    "\025\047\027\uffcc\030\uffcc\031\uffcc\032\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\042\uffcc\001\002\000\044\006\uffdf" +
    "\010\uffdf\015\uffdf\020\uffdf\022\uffdf\023\uffdf\024\053\025" +
    "\047\027\uffdf\030\uffdf\031\uffdf\032\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\042\uffdf\001\002\000\044\006\uffdd\010" +
    "\uffdd\015\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\042\uffdd\001\002\000\044\006\uffcf\010\uffcf" +
    "\015\uffcf\020\uffcf\022\050\023\045\024\053\025\047\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\042\uffcf\001\002\000\044\006\uffde\010\uffde\015" +
    "\uffde\020\uffde\022\uffde\023\uffde\024\053\025\047\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\042\uffde\001\002\000\044\006\uffce\010\uffce\015\uffce" +
    "\020\uffce\022\050\023\045\024\053\025\047\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\042\uffce\001\002\000\044\006\uffcb\010\uffcb\015\uffcb\020" +
    "\054\022\050\023\045\024\053\025\047\027\052\030\046" +
    "\031\044\032\051\035\uffcb\036\043\037\055\040\uffcb\042" +
    "\uffcb\001\002\000\032\020\054\022\050\023\045\024\053" +
    "\025\047\027\052\030\046\031\044\032\051\036\043\037" +
    "\055\040\072\001\002\000\052\005\022\023\004\033\014" +
    "\041\037\043\016\044\033\045\005\046\040\047\007\050" +
    "\011\051\027\052\026\053\025\054\006\055\023\056\036" +
    "\057\034\060\010\061\017\062\030\001\002\000\044\006" +
    "\uffdb\010\uffdb\015\uffdb\020\054\022\050\023\045\024\053" +
    "\025\047\027\052\030\046\031\044\032\051\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\042\uffdb\001\002\000\054\005\022" +
    "\015\075\023\004\033\014\041\037\043\016\044\033\045" +
    "\005\046\040\047\007\050\011\051\027\052\026\053\025" +
    "\054\006\055\023\056\036\057\034\060\010\061\017\062" +
    "\030\001\002\000\052\005\022\023\004\033\014\041\037" +
    "\043\016\044\033\045\005\046\040\047\007\050\011\051" +
    "\027\052\026\053\025\054\006\055\023\056\036\057\034" +
    "\060\010\061\017\062\030\001\002\000\004\006\104\001" +
    "\002\000\032\015\100\020\054\022\050\023\045\024\053" +
    "\025\047\027\052\030\046\031\044\032\051\036\043\037" +
    "\055\001\002\000\052\005\022\023\004\033\014\041\037" +
    "\043\016\044\033\045\005\046\040\047\007\050\011\051" +
    "\027\052\026\053\025\054\006\055\023\056\036\057\034" +
    "\060\010\061\017\062\030\001\002\000\032\015\102\020" +
    "\054\022\050\023\045\024\053\025\047\027\052\030\046" +
    "\031\044\032\051\036\043\037\055\001\002\000\054\005" +
    "\022\006\uffee\023\004\033\014\041\037\043\016\044\033" +
    "\045\005\046\040\047\007\050\011\051\027\052\026\053" +
    "\025\054\006\055\023\056\036\057\034\060\010\061\017" +
    "\062\030\001\002\000\032\006\ufff0\020\054\022\050\023" +
    "\045\024\053\025\047\027\052\030\046\031\044\032\051" +
    "\036\043\037\055\001\002\000\066\004\021\005\022\012" +
    "\012\013\024\014\035\016\031\023\004\033\014\034\013" +
    "\041\037\043\016\044\033\045\005\046\040\047\007\050" +
    "\011\051\027\052\026\053\025\054\006\055\023\056\036" +
    "\057\034\060\010\061\017\062\030\001\002\000\074\002" +
    "\ufff5\004\ufff5\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\016\ufff5\023\ufff5\033\ufff5\034\ufff5\035\ufff5\041\ufff5\043" +
    "\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\001\002\000\032\015\107\020\054" +
    "\022\050\023\045\024\053\025\047\027\052\030\046\031" +
    "\044\032\051\036\043\037\055\001\002\000\054\005\022" +
    "\006\uffed\023\004\033\014\041\037\043\016\044\033\045" +
    "\005\046\040\047\007\050\011\051\027\052\026\053\025" +
    "\054\006\055\023\056\036\057\034\060\010\061\017\062" +
    "\030\001\002\000\032\006\uffef\020\054\022\050\023\045" +
    "\024\053\025\047\027\052\030\046\031\044\032\051\036" +
    "\043\037\055\001\002\000\044\006\uffe2\010\uffe2\015\uffe2" +
    "\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\042\uffe2\001\002\000\072\002\uffff\004\uffff\005\uffff\012" +
    "\uffff\013\uffff\014\uffff\016\uffff\023\uffff\033\uffff\034\uffff" +
    "\035\uffff\041\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff" +
    "\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\001\002\000" +
    "\054\005\022\023\004\033\014\034\114\041\037\043\016" +
    "\044\033\045\005\046\040\047\007\050\011\051\027\052" +
    "\026\053\025\054\006\055\023\056\036\057\034\060\010" +
    "\061\017\062\030\001\002\000\052\005\022\023\004\033" +
    "\014\041\037\043\016\044\033\045\005\046\040\047\007" +
    "\050\011\051\027\052\026\053\025\054\006\055\023\056" +
    "\036\057\034\060\010\061\017\062\030\001\002\000\032" +
    "\006\116\020\054\022\050\023\045\024\053\025\047\027" +
    "\052\030\046\031\044\032\051\036\043\037\055\001\002" +
    "\000\004\015\117\001\002\000\074\002\ufffd\004\ufffd\005" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\016\ufffd\023\ufffd" +
    "\033\ufffd\034\ufffd\035\ufffd\041\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\001\002\000\034\020\054\022\050\023\045\024\053" +
    "\025\047\027\052\030\046\031\044\032\051\035\uffab\036" +
    "\043\037\055\040\125\001\002\000\004\035\122\001\002" +
    "\000\004\006\123\001\002\000\004\015\124\001\002\000" +
    "\074\002\ufffc\004\ufffc\005\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\016\ufffc\023\ufffc\033\ufffc\034\ufffc\035\ufffc\041" +
    "\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\057" +
    "\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002\000\052\005\022" +
    "\023\004\033\014\041\037\043\016\044\033\045\005\046" +
    "\040\047\007\050\011\051\027\052\026\053\025\054\006" +
    "\055\023\056\036\057\034\060\010\061\017\062\030\001" +
    "\002\000\004\035\uffac\001\002\000\044\006\uffe4\010\uffe4" +
    "\015\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\042\uffe4\001\002\000\050\006\uffb3\007\132\010" +
    "\uffb3\015\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\133\027\uffb3\030\uffb3\031\uffb3\032\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\131\042\uffb3\001\002\000\004\054\130" +
    "\001\002\000\004\055\137\001\002\000\052\005\022\023" +
    "\004\033\014\041\037\043\016\044\033\045\005\046\040" +
    "\047\007\050\011\051\027\052\026\053\025\054\006\055" +
    "\023\056\036\057\034\060\010\061\017\062\030\001\002" +
    "\000\044\006\uffb1\010\uffb1\015\uffb1\020\054\022\050\023" +
    "\045\024\053\025\047\027\052\030\046\031\044\032\051" +
    "\035\uffb1\036\043\037\055\040\135\042\uffb1\001\002\000" +
    "\004\054\130\001\002\000\044\006\uffb0\010\uffb0\015\uffb0" +
    "\020\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\042\uffb0\001\002\000\004\010\140\001\002\000\044\006" +
    "\uffaf\010\uffaf\015\uffaf\020\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\042\uffaf\001\002\000\044\006\uffb2" +
    "\010\uffb2\015\uffb2\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\042\uffb2\001\002\000\044\006\uffe7\010" +
    "\uffe7\015\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\042\uffe7\001\002\000\046\006\uffbd\010\uffbd" +
    "\015\uffbd\020\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\145\027\uffbd\030\uffbd\031\uffbd\032\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\144\042\uffbd\001\002\000\004\054\143\001" +
    "\002\000\052\005\022\023\004\033\014\041\037\043\016" +
    "\044\033\045\005\046\040\047\007\050\011\051\027\052" +
    "\026\053\025\054\006\055\023\056\036\057\034\060\010" +
    "\061\017\062\030\001\002\000\044\006\uffbb\010\uffbb\015" +
    "\uffbb\020\054\022\050\023\045\024\053\025\047\027\052" +
    "\030\046\031\044\032\051\035\uffbb\036\043\037\055\040" +
    "\147\042\uffbb\001\002\000\004\054\143\001\002\000\044" +
    "\006\uffba\010\uffba\015\uffba\020\uffba\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\027\uffba\030\uffba\031\uffba\032\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\042\uffba\001\002\000\044\006" +
    "\uffbc\010\uffbc\015\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\042\uffbc\001\002\000\044\006\uffe8" +
    "\010\uffe8\015\uffe8\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\042\uffe8\001\002\000\046\006\uffc1\010" +
    "\uffc1\015\uffc1\020\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\155\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\154\042\uffc1\001\002\000\004\054\153" +
    "\001\002\000\052\005\022\023\004\033\014\041\037\043" +
    "\016\044\033\045\005\046\040\047\007\050\011\051\027" +
    "\052\026\053\025\054\006\055\023\056\036\057\034\060" +
    "\010\061\017\062\030\001\002\000\044\006\uffbf\010\uffbf" +
    "\015\uffbf\020\054\022\050\023\045\024\053\025\047\027" +
    "\052\030\046\031\044\032\051\035\uffbf\036\043\037\055" +
    "\040\157\042\uffbf\001\002\000\004\054\153\001\002\000" +
    "\044\006\uffbe\010\uffbe\015\uffbe\020\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\042\uffbe\001\002\000\044" +
    "\006\uffc0\010\uffc0\015\uffc0\020\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\042\uffc0\001\002\000\004\012" +
    "\163\001\002\000\004\005\164\001\002\000\052\005\022" +
    "\023\004\033\014\041\037\043\016\044\033\045\005\046" +
    "\040\047\007\050\011\051\027\052\026\053\025\054\006" +
    "\055\023\056\036\057\034\060\010\061\017\062\030\001" +
    "\002\000\032\006\166\020\054\022\050\023\045\024\053" +
    "\025\047\027\052\030\046\031\044\032\051\036\043\037" +
    "\055\001\002\000\004\015\167\001\002\000\074\002\ufff7" +
    "\004\ufff7\005\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\016" +
    "\ufff7\023\ufff7\033\ufff7\034\ufff7\035\ufff7\041\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\001\002\000\032\006\171\020\054\022" +
    "\050\023\045\024\053\025\047\027\052\030\046\031\044" +
    "\032\051\036\043\037\055\001\002\000\044\006\uffd2\010" +
    "\uffd2\015\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\042\uffd2\001\002\000\052\005\022\023\004" +
    "\033\014\041\037\043\016\044\033\045\005\046\040\047" +
    "\007\050\011\051\027\052\026\053\025\054\006\055\023" +
    "\056\036\057\034\060\010\061\017\062\030\001\002\000" +
    "\004\006\205\001\002\000\034\006\175\020\054\022\050" +
    "\023\045\024\053\025\047\027\052\030\046\031\044\032" +
    "\051\036\043\037\055\042\176\001\002\000\066\004\021" +
    "\005\022\012\012\013\024\014\035\016\031\023\004\033" +
    "\014\034\013\041\037\043\016\044\033\045\005\046\040" +
    "\047\007\050\011\051\027\052\026\053\025\054\006\055" +
    "\023\056\036\057\034\060\010\061\017\062\030\001\002" +
    "\000\052\005\022\023\004\033\014\041\037\043\016\044" +
    "\033\045\005\046\040\047\007\050\011\051\027\052\026" +
    "\053\025\054\006\055\023\056\036\057\034\060\010\061" +
    "\017\062\030\001\002\000\004\006\ufff3\001\002\000\034" +
    "\006\ufff4\020\054\022\050\023\045\024\053\025\047\027" +
    "\052\030\046\031\044\032\051\036\043\037\055\042\176" +
    "\001\002\000\074\002\ufff9\004\ufff9\005\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\016\ufff9\023\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\001\002\000" +
    "\074\002\ufff1\004\ufff1\005\ufff1\011\203\012\ufff1\013\ufff1" +
    "\014\ufff1\016\ufff1\023\ufff1\033\ufff1\034\ufff1\035\ufff1\041" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\001\002\000\066\004\021" +
    "\005\022\012\012\013\024\014\035\016\031\023\004\033" +
    "\014\034\013\041\037\043\016\044\033\045\005\046\040" +
    "\047\007\050\011\051\027\052\026\053\025\054\006\055" +
    "\023\056\036\057\034\060\010\061\017\062\030\001\002" +
    "\000\074\002\ufff2\004\ufff2\005\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\023\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\041\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050" +
    "\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\057\ufff2\060\ufff2\061\ufff2\062\ufff2\001\002\000\066\004" +
    "\021\005\022\012\012\013\024\014\035\016\031\023\004" +
    "\033\014\034\013\041\037\043\016\044\033\045\005\046" +
    "\040\047\007\050\011\051\027\052\026\053\025\054\006" +
    "\055\023\056\036\057\034\060\010\061\017\062\030\001" +
    "\002\000\074\002\ufff8\004\ufff8\005\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\016\ufff8\023\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\041\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\001\002\000\074" +
    "\002\ufffb\004\ufffb\005\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\016\ufffb\023\ufffb\033\ufffb\034\ufffb\035\ufffb\041\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\001\002\000\044\006\uffe3\010" +
    "\uffe3\015\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\042\uffe3\001\002\000\004\002\000\001\002" +
    "\000\044\006\uffc7\010\uffc7\015\uffc7\020\054\022\050\023" +
    "\045\024\053\025\047\027\052\030\046\031\044\032\051" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\042\uffc7\001\002\000" +
    "\070\004\021\005\022\012\012\013\024\014\035\016\031" +
    "\023\004\033\014\034\013\035\214\041\037\043\016\044" +
    "\033\045\005\046\040\047\007\050\011\051\027\052\026" +
    "\053\025\054\006\055\023\056\036\057\034\060\010\061" +
    "\017\062\030\001\002\000\074\002\ufffa\004\ufffa\005\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\016\ufffa\023\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\041\ufffa\043\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa" +
    "\001\002\000\052\005\022\023\004\033\014\041\037\043" +
    "\016\044\033\045\005\046\040\047\007\050\011\051\027" +
    "\052\026\053\025\054\006\055\023\056\036\057\034\060" +
    "\010\061\017\062\030\001\002\000\032\006\217\020\054" +
    "\022\050\023\045\024\053\025\047\027\052\030\046\031" +
    "\044\032\051\036\043\037\055\001\002\000\066\004\021" +
    "\005\022\012\012\013\024\014\035\016\031\023\004\033" +
    "\014\034\013\041\037\043\016\044\033\045\005\046\040" +
    "\047\007\050\011\051\027\052\026\053\025\054\006\055" +
    "\023\056\036\057\034\060\010\061\017\062\030\001\002" +
    "\000\074\002\ufff6\004\ufff6\005\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\016\ufff6\023\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\041\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\062\ufff6\001\002\000\050\006" +
    "\uffb9\007\224\010\uffb9\015\uffb9\020\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\225\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\223\042\uffb9\001\002" +
    "\000\044\006\uffe5\010\uffe5\015\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\001\002\000" +
    "\004\054\221\001\002\000\004\055\231\001\002\000\052" +
    "\005\022\023\004\033\014\041\037\043\016\044\033\045" +
    "\005\046\040\047\007\050\011\051\027\052\026\053\025" +
    "\054\006\055\023\056\036\057\034\060\010\061\017\062" +
    "\030\001\002\000\044\006\uffb7\010\uffb7\015\uffb7\020\054" +
    "\022\050\023\045\024\053\025\047\027\052\030\046\031" +
    "\044\032\051\035\uffb7\036\043\037\055\040\227\042\uffb7" +
    "\001\002\000\004\054\221\001\002\000\044\006\uffb6\010" +
    "\uffb6\015\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\042\uffb6\001\002\000\004\010\232\001\002" +
    "\000\046\006\uffb5\010\uffb5\015\uffb5\020\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\233\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5\001" +
    "\002\000\004\034\234\001\002\000\052\005\022\023\004" +
    "\033\014\041\037\043\016\044\033\045\005\046\040\047" +
    "\007\050\011\051\027\052\026\053\025\054\006\055\023" +
    "\056\036\057\034\060\010\061\017\062\030\001\002\000" +
    "\004\035\241\001\002\000\034\020\054\022\050\023\045" +
    "\024\053\025\047\027\052\030\046\031\044\032\051\035" +
    "\uffad\036\043\037\055\040\237\001\002\000\052\005\022" +
    "\023\004\033\014\041\037\043\016\044\033\045\005\046" +
    "\040\047\007\050\011\051\027\052\026\053\025\054\006" +
    "\055\023\056\036\057\034\060\010\061\017\062\030\001" +
    "\002\000\004\035\uffae\001\002\000\044\006\uffb4\010\uffb4" +
    "\015\uffb4\020\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\042\uffb4\001\002\000\044\006\uffb8\010\uffb8\015" +
    "\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\042\uffb8\001\002\000\044\006\uffe6\010\uffe6\015\uffe6" +
    "\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\042\uffe6\001\002\000\050\006\uffc6\007\246\010\uffc6\015" +
    "\uffc6\020\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\247" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\245\042\uffc6\001\002\000\004\054\244\001\002" +
    "\000\004\055\253\001\002\000\052\005\022\023\004\033" +
    "\014\041\037\043\016\044\033\045\005\046\040\047\007" +
    "\050\011\051\027\052\026\053\025\054\006\055\023\056" +
    "\036\057\034\060\010\061\017\062\030\001\002\000\044" +
    "\006\uffc4\010\uffc4\015\uffc4\020\054\022\050\023\045\024" +
    "\053\025\047\027\052\030\046\031\044\032\051\035\uffc4" +
    "\036\043\037\055\040\251\042\uffc4\001\002\000\004\054" +
    "\244\001\002\000\044\006\uffc3\010\uffc3\015\uffc3\020\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3" +
    "\001\002\000\004\010\254\001\002\000\044\006\uffc2\010" +
    "\uffc2\015\uffc2\020\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\042\uffc2\001\002\000\044\006\uffc5\010\uffc5" +
    "\015\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\042\uffc5\001\002\000\044\006\uffd1\010\uffd1\015" +
    "\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\042\uffd1\001\002\000\052\005\022\023\004\033\014" +
    "\041\037\043\016\044\033\045\005\046\040\047\007\050" +
    "\011\051\027\052\026\053\025\054\006\055\266\056\036" +
    "\057\034\060\010\061\017\062\030\001\002\000\054\005" +
    "\022\023\004\033\014\034\261\041\037\043\016\044\033" +
    "\045\005\046\040\047\007\050\011\051\027\052\026\053" +
    "\025\054\006\055\023\056\036\057\034\060\010\061\017" +
    "\062\030\001\002\000\052\005\022\023\004\033\014\041" +
    "\037\043\016\044\033\045\005\046\040\047\007\050\011" +
    "\051\027\052\026\053\025\054\006\055\023\056\036\057" +
    "\034\060\010\061\017\062\030\001\002\000\044\006\uffd9" +
    "\010\uffd9\015\uffd9\020\054\022\050\023\045\024\053\025" +
    "\047\027\052\030\046\031\044\032\051\035\uffd9\036\043" +
    "\037\055\040\uffd9\042\uffd9\001\002\000\004\035\264\001" +
    "\002\000\044\006\uffd4\010\uffd4\015\uffd4\020\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\001\002" +
    "\000\032\010\272\020\054\022\050\023\045\024\053\025" +
    "\047\027\052\030\046\031\044\032\051\036\043\037\055" +
    "\001\002\000\032\010\267\020\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\027\uffec\030\uffec\031\uffec\032\uffec\036\uffec" +
    "\037\uffec\001\002\000\046\006\uffd8\010\uffd8\015\uffd8\020" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\270\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\042\uffd8\001\002\000\052\005\022\023\004\033\014" +
    "\041\037\043\016\044\033\045\005\046\040\047\007\050" +
    "\011\051\027\052\026\053\025\054\006\055\023\056\036" +
    "\057\034\060\010\061\017\062\030\001\002\000\044\006" +
    "\uffd6\010\uffd6\015\uffd6\020\054\022\050\023\045\024\053" +
    "\025\047\027\052\030\046\031\044\032\051\035\uffd6\036" +
    "\043\037\055\040\uffd6\042\uffd6\001\002\000\046\006\uffd7" +
    "\010\uffd7\015\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\273\027\uffd7\030\uffd7\031\uffd7\032\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\042\uffd7\001\002\000\052\005" +
    "\022\023\004\033\014\041\037\043\016\044\033\045\005" +
    "\046\040\047\007\050\011\051\027\052\026\053\025\054" +
    "\006\055\023\056\036\057\034\060\010\061\017\062\030" +
    "\001\002\000\044\006\uffd5\010\uffd5\015\uffd5\020\054\022" +
    "\050\023\045\024\053\025\047\027\052\030\046\031\044" +
    "\032\051\035\uffd5\036\043\037\055\040\uffd5\042\uffd5\001" +
    "\002\000\044\006\uffe1\010\uffe1\015\uffe1\020\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\042\uffe1\001\002" +
    "\000\044\006\uffda\010\uffda\015\uffda\020\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\042\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\012\002\014\003\031\004\040\005\017\001" +
    "\001\000\004\005\275\001\001\000\004\005\274\001\001" +
    "\000\002\001\001\000\004\011\242\001\001\000\002\001" +
    "\001\000\004\014\221\001\001\000\002\001\001\000\010" +
    "\003\212\004\040\005\017\001\001\000\004\005\211\001" +
    "\001\000\002\001\001\000\004\005\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\167\001\001\000\002\001\001\000\006\004\161\005\017" +
    "\001\001\000\004\012\151\001\001\000\004\013\141\001" +
    "\001\000\004\015\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\111\005\017\001\001\000\004\005" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\070\001\001\000\004\005\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\067" +
    "\001\001\000\004\005\066\001\001\000\004\005\065\001" +
    "\001\000\004\005\064\001\001\000\004\005\063\001\001" +
    "\000\004\005\062\001\001\000\004\005\061\001\001\000" +
    "\004\005\060\001\001\000\004\005\057\001\001\000\004" +
    "\005\056\001\001\000\004\005\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\072\001\001\000" +
    "\002\001\001\000\006\005\076\010\075\001\001\000\004" +
    "\005\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\100\001\001\000\002\001\001\000\004\005\102" +
    "\001\001\000\002\001\001\000\006\004\104\005\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\114\001\001\000\006\005\117\017\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\117\017" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\140\001\001\000\002\001\001\000" +
    "\004\005\133\001\001\000\002\001\001\000\004\015\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\150\001\001\000\004\005\145\001\001\000" +
    "\002\001\001\000\004\013\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\160\001\001\000\004\005\155\001\001\000\002" +
    "\001\001\000\004\012\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\173\006\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\201\005\017\007\200\001\001\000\006" +
    "\005\177\006\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\203" +
    "\005\017\001\001\000\002\001\001\000\010\004\201\005" +
    "\017\007\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\111\005\017\001\001\000\002\001\001\000\004" +
    "\005\215\001\001\000\002\001\001\000\006\004\217\005" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\241\001\001\000\002\001\001\000" +
    "\004\005\225\001\001\000\002\001\001\000\004\014\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\235\016\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\235\016" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\254\001\001\000\002\001\001\000\004\005\247\001\001" +
    "\000\002\001\001\000\004\011\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\264\001\001\000\004\005" +
    "\261\001\001\000\006\005\235\016\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\270" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   /* public void syntax_error(Symbol s){
        System.err.println("Error token " + s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error token " + s);
        done_parsing();
    }
	*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ini ::= listaSent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AST a = new AST("ini", e, null); a.gc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= listaSent sent 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("sent", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaSent ::= sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("sent", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= PRINT AP exp CP PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("print", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= PRINT AP ALL pArrayIni CLL CP PYC 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new AST("printArray", a ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= exp PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= ALL listaSent CLL 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= IF AP exp CP elseSent 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("if", c, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= IF AP implica CP elseSent 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("if", c, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= DO sent WHILE AP exp CP PYC 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("doWhile",c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= WHILE AP exp CP sent 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("while",c,s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= FOR AP expFor CP sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("for", e, s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // implica ::= exp IMPLICA exp 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("dimplica",c1,c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("implica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // implica ::= exp IMPLICA implica 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST i = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("dimplica",e1,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("implica",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // elseSent ::= sent ELSE sent 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("else", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseSent",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // elseSent ::= sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("else", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseSent",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expFor ::= exp PYC exp PYC exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", c, new AST("aux", e1, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expFor ::= PYC exp PYC exp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", c, new AST("aux", null, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expFor ::= exp PYC exp PYC 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", c, new AST("aux", e1, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expFor ::= PYC exp PYC 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", c, new AST("aux", null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= NUM 
            {
              AST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("num", new AST(n, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= REAL 
            {
              AST RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("real", new AST(r, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= ASCII 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("ascii", new AST(a, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= FRASE 
            {
              AST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("frase", new AST(f, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= BOOLEAN listaBoolean 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("boolean", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= STRING listaString 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("string", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= INT listaEnteros 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("int", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= CHAR listaChar 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("char", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= FLOAT listaReales 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("float", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= CASTCHAR exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castChar", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= CASTINT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castInt", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= CASTFLOAT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castFloat", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= CASTBOOL exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castBool", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp MAS exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mas", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp MENOS exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menos", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp POR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("por", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp DIV exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("div", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= EXITS exp COMA exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("exits", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= MENOS exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menosUnario", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asig", new AST(i, null, null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayPos", new AST(i, null, null), new AST(n, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= IDENT AC exp CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayPos", new AST(i, null, null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= IDENT AC NUM CC ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayAsig", new AST(i, new AST(n, null, null), null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= IDENT AC exp CC ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayAsig", new AST(i, e1, null), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= IDENT ASIG ALL arrayIni CLL 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("iniArray", new AST(i, null, null), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("ident", new AST(i, null, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= AP exp CP 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= IDENT LENGTH 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("length", new AST(i, null, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp IGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("igual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp MENOR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menor", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp MENORIGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menorIgual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp MAYOR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mayor", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp MAYORIGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mayorIgual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp AND exp 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= TRUE 
            {
              AST RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("true", new AST(t, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= FALSE 
            {
              AST RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("false", new AST(f, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp OR exp 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or",c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= NOT exp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("not", c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listaEnteros ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("intIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaEnteros ::= IDENT COMA listaEnteros 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("intIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaEnteros ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigInt", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listaEnteros ::= IDENT ASIG exp COMA listaEnteros 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigInt", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listaEnteros ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayInt", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listaBoolean ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("booleanIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBoolean",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listaBoolean ::= IDENT COMA listaBoolean 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("booleanIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBoolean",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listaBoolean ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigBoolean", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBoolean",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listaBoolean ::= IDENT ASIG exp COMA listaBoolean 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigBoolean", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBoolean",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listaString ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("stringIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaString",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listaString ::= IDENT COMA listaString 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("stringIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaString",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // listaString ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigString", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaString",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // listaString ::= IDENT ASIG exp COMA listaString 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigString", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaString",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // listaChar ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("charIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // listaChar ::= IDENT COMA listaChar 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("charIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listaChar ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigChar", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // listaChar ::= IDENT ASIG exp COMA listaChar 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigChar", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // listaChar ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayChar", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // listaChar ::= IDENT AC NUM CC ASIG ALL arrayIni CLL 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("iniAsigArrayCh",new AST("iniArray", new AST(i, null, null),a), 
																			new AST("arrayChar", new AST(i, null, null), new AST(n,null,null))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // listaReales ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("floatIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // listaReales ::= IDENT COMA listaReales 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("floatIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // listaReales ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigFloat", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // listaReales ::= IDENT ASIG exp COMA listaReales 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigFloat", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listaReales ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayFloat", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arrayIni ::= exp COMA arrayIni 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayIni", e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIni",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arrayIni ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayIni", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIni",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // pArrayIni ::= exp COMA pArrayIni 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("pArrayIni", e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pArrayIni",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // pArrayIni ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("pArrayIni", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pArrayIni",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
