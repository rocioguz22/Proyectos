summary(falsas$`#posts`)
unique(falsas$`#posts`)
unique((test %>% filter(fake == 0))$`#posts`)
followers <-  falsas %>%
group_by(`#followers`)%>%
summarise(cantidad=n()) %>%
arrange(desc(cantidad))
followers
followers <-  falsas %>%
group_by(Type_of_Breach)%>%
summarise(cantidad=n()) %>%
arrange(desc(cantidad))
plot <- falsas %>% mutate(media_seguidores= (`#followers` + `#follows`)) select(`media_seguidores`)
plot <- falsas %>% mutate(media_seguidores= (`#followers` + `#follows`)) select(`media_seguidores`)
library(readr)
library(dplyr)
test <- read_csv("test.csv")
variables <- colnames(train)
variables <- colnames(test)
variables
variables <- colnames(test)
variables
ifelse(sum(is.na(test)) == 0,"No hay valores NA","El dataset contiene valores NA")
ifelse(sum(is.na(test)) == 0,"No hay valores NA","El dataset contiene valores NA")
falsas <- test %>% filter (fake == 1) %>% select(c(`profile pic`,`fullname words`,`name==username`,`description length`,`external URL`,`#posts`,`private`,`#follows`,`#followers`))
falsas
(nrow(falsas)/nrow(test))*100
summary(falsas$`fullname words`)
unique(falsas$`fullname words`)
(nrow(falsas %>% filter(`fullname words` == 0))/nrow(falsas))*100
(nrow(test %>% filter(`fullname words` == 0, fake == 0))/nrow(test %>% filter(fake == 0)))*100
summary(falsas$`#posts`)
unique(falsas$`#posts`)
unique((test %>% filter(fake == 0))$`#posts`)
summary(falsas$`#follows`)
unique(falsas$`#follows`)
summary(falsas$`#followers`)
unique(falsas$`#followers`)
falsas <- falsas %>% mutate(ratio = falsas$`#follows`)
library(readr)
library(dplyr)
test <- read_csv("test.csv")
falsas <- falsas %>% mutate(ratio = falsas$`#follows`)
falsas <- falsas %>% mutate(ratio = falsas$`#follows`)
falsas
falsas <- falsas %>% mutate(ratio = falsas$`#follows`/falsas$`#followers`)
falsas
summary(falsas$`ratio`)
falsas <- falsas %>% mutate(ifelse(ratio = falsas$`#follows`/falsas$`#followers`) == Inf,ratio =0,ratio = falsas$`#follows`/falsas$`#followers`)
falsas <- falsas %>%
mutate(ratio = ifelse(is.infinite(`#follows`/`#followers`),0,`#follows`/`#followers`))
falsas
summary(falsas$`ratio`)
summary(test %>% filter(fake == 0) %>%
mutate(ratio =ifelse(is.infinite(`#follows`/`#followers`),0,`#follows`/`#followers`))$`ratio`)
summary(test %>%
filter(fake == 0) %>%
mutate(ratio = ifelse(is.infinite(`#follows`/`#followers`), 0, `#follows`/`#followers`))$ratio)
summary(test %>%
filter(fake == 0) %>%
mutate(ratio = ifelse(is.infinite(`#follows`/`#followers`), 0, `#follows`/`#followers`)))
summary(test %>%
filter(fake == 0) %>%
mutate(ratio = ifelse(is.infinite(`#follows`/`#followers`), 0,
`#follows`/`#followers`)) %>% select(ratio) )
nrow(falsas %>% filter(private == 0))
nrow(falsas %>% filter(private == 1))
library(ggplot2)
ggplot(datos, aes(x = nums_length_username)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
ggtitle("Histograma de Longitud de Nombre de Usuario")
ggplot(test, aes(x = nums_length_username)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
ggtitle("Histograma de Longitud de Nombre de Usuario")
library(readr)
test <- read_csv("test.csv")
View(test)
ggplot(test, aes(x = test$`fullname words`)) +
geom_histogram(binwidth = 0.1, fill = "skyblue", color = "black") +
ggtitle("Histograma de Longitud de Nombre de Usuario")
ggplot(datos, aes(x = test$`description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot(test, aes(x = test$`description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot(falsas, aes(x = falsas$`description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot(falsas, aes(x = falsas$`description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot(falsas, aes(x = `description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot(test, aes(x = `description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot(test %>% filter(fake=0), aes(x = `description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot((test %>% filter(fake = 0)), aes(x = `description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot((test %>% filter(fake == 0)), aes(x = `description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot(falsas, aes(x = `description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot((test %>% filter(fake == 0)), aes(x = `description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("green", "red"), color = "black") +
labs(x = "Perfil Falso (0: No, 1: Sí)", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("green", "red"), color = "black") +
labs(x = "", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("purple", "pink"), color = "black") +
labs(x = "", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("bluesky", "pink"), color = "black") +
labs(x = "", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("skyblue", "pink"), color = "black") +
labs(x = "", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("skyblue", "pink"), color = "black") +
labs(x = "Verdaderas         Falsas", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("skyblue", "pink"), color = "black") +
labs(x = "Verdaderas                      Falsas", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("skyblue", "pink"), color = "black") +
labs(x = "Verdaderas                               Falsas", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("skyblue", "pink"), color = "black") +
labs(x = "Verdaderas y Falsas", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot(falsas, aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 0.5) +
ggtitle("Relación entre Seguidores y Seguidos")
ggplot((test %>% filter(fake == 0)), aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 0.5) +
ggtitle("Relación entre Seguidores y Seguidos")
ggplot(falsas, aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 0.5) +
ggtitle("Relación entre Seguidores y Seguidos")
ggplot((test %>% filter(fake == 0)), aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 1) +
ggtitle("Relación entre Seguidores y Seguidos")
ggplot((test %>% filter(fake == 0)), aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 3) +
ggtitle("Relación entre Seguidores y Seguidos")
ggplot((test %>% filter(fake == 0)), aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 0.2) +
ggtitle("Relación entre Seguidores y Seguidos")
correlation_matrix <- cor(test[,c(3,6:11)])
ggplot(data = NULL) +
geom_tile(aes(x = factor(1:8), y = factor(1:8), fill = correlation_matrix), color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
ggtitle("Mapa de Calor de Correlación")
ggplot((test %>% filter(fake == 0)), aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 10) +
ggtitle("Relación entre Seguidores y Seguidos")
ggplot((test %>% filter(fake == 0)), aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 0.01) +
ggtitle("Relación entre Seguidores y Seguidos")
ggplot((test %>% filter(fake == 0)), aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 0.5) +
ggtitle("Relación entre Seguidores y Seguidos")
transacciones <- as(falsas, "transactions")
library(arules)
transacciones <- as(falsas, "transactions")
unique_values <- length(unique(falsas$`external URL`))
unique(falsas$`external URL`)
unique(falsas$private)
unique(c(falsas$`external URL`,falsas$private)
unique(c(falsas$`external URL`,falsas$private))
unique(c(falsas$`external URL`,falsas$private))
unique(c(falsas$`external URL`,falsas$private))
unique(falsas$`external URL`)
unique(falsas$private)
reglas <- as((falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)), "transactions")
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`))
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
summary(reglas$`#posts`)
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(0, 1, 6, 81), labels = c("One", "Medium", "To much"))
reglas
summary(reglas$`#posts`)
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(0, 1, 6, 82), labels = c("One", "Medium", "To much"))
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(0, 1, 6, 82), labels = c("One", "Medium", "To much"))
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(0, 1, 6, 82), labels = c("One", "Medium", "To much"))
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(0, 1, 6, 82), labels = c("One", "Medium", "To much"))
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(0, 1, 6, 82), labels = c("One", "Medium", "To much"))
reglas
summary(reglas$`#posts`)
reglas
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
reglas
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(-1, 1, 6, 82), labels = c("One", "Medium", "To much"))
reglas
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(-1, 1, 6, 82), labels = c("One or less", "Medium", "To much"))
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(-1, 1, 6, 82), labels = c("One or less", "Medium", "To much"))
reglas
summary(reglas$`#follows`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(0, 160, 854, 7500), labels = c("A bit", "Medium", "To much"))
summary(reglas$`#follows`)
reglas$`#follows`<- cut(reglas$`#follows`, breaks = c(0, 160, 854, 7500), labels = c("A bit", "Medium", "To much"))
reglas
summary(reglas$`#follows`)
reglas
summary(reglas$`#followers`)
summary(reglas$`#followers`)
reglas$`#follows`<- cut(reglas$`#follows`, breaks = c(-1, 70, 230, 3000), labels = c("A bit", "Medium", "To much"))
summary(reglas$`#followers`)
reglas$`#followers`<- cut(reglas$`#followers`, breaks = c(-1, 70, 230, 3000), labels = c("A bit", "Medium", "To much"))
reglas
reglas$`profile pic` <- iselse(reglas$`profile pic` == 0, "No", "Sí")
reglas$`profile pic` <- ifelse(reglas$`profile pic` == 0, "No", "Sí")
reglas
reglas
#Lo utilizo para determinar los rangos que ponerle al cut
summary(reglas$`fullname words`)
#Lo utilizo para determinar los rangos que ponerle al cut
summary(reglas$`fullname words`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(-1, 1, 2,5), labels = c("Short", "A few", "To much"))
#Lo utilizo para determinar los rangos que ponerle al cut
summary(reglas$`fullname words`)
reglas$`fullname words`<- cut(reglas$`fullname words`, breaks = c(-1, 1, 2,5), labels = c("Short", "A few", "To much"))
#Lo utilizo para determinar los rangos que ponerle al cut
summary(reglas$`fullname words`)
reglas$`name==username` <- ifelse(reglas$`name==username` == 0, "No", "Sí")
reglas
reglas$`description length`<- ifelse(reglas$`description length` == 0, "No", "Sí")
reglas
reglas <- as(reglas, "transactions")
# Ejecutar algoritmo Apriori
r1 <- apriori(reglas, parameter = list(support = 0.1, confidence = 0.5))
# Mostrar las reglas encontradas
inspect(reglas)
inspect(r1)
r1
library(fcaR)
fc <- FormalContext$new(falsas)
fc <- FormalContext$new(falsas)
fc
library(fcaR)
fc <- FormalContext$new(falsas)
fc
fc$scale("fullname words", type = "ordinal")
fc$scale("fullname words", type = "ordinal")
fc$get_scales("fullname words")
fc$get_scales("fullname words")
fc$scale("#posts",
type = "interval",
values = c(-1, 1, 6, 82),
interval_names = c("One or less", "Medium", "To much"))
fc$scale("#follows",
type = "interval",
values =  c(0, 160, 854, 7500),
interval_names = c("A bit", "Medium", "To much"))
fc$scale("#followers",
type = "interval",
values = c(-1, 70, 230, 3000),
interval_names = c("A bit", "Medium", "To much"))
fc$get_scales(c("#post", "#followers","#follows"))
fc$get_scales(c("#posts", "#followers","#follows"))
fc$plot()
fc
summary(falsas$`description length`)
fc$scale("description length",
type = "interval",
values = c(-1, 0, 4, 115),
interval_names = c("Any", "Medium", "To much"))
fc$get_scales(c("#posts", "#followers","#follows","description length"))
fc
fc$plot()
fc$plot(#posts)
fc$plot(#posts)
fc$plot(private)
fc
fc$plot()
falsas
fc$scale("description length",
type = "interval",
values = c(-1, 1, 4, 115),
interval_names = c("Any", "Medium", "To much"))
library(fcaR)
fc <- FormalContext$new(falsas)
fc$scale("fullname words", type = "ordinal")
fc$get_scales("fullname words")
fc$scale("#posts",
type = "interval",
values = c(-1, 1, 6, 82),
interval_names = c("One or less", "Medium", "To much"))
fc$scale("#follows",
type = "interval",
values =  c(0, 160, 854, 7500),
interval_names = c("A bit", "Medium", "To much"))
fc$scale("#followers",
type = "interval",
values = c(-1, 70, 230, 3000),
interval_names = c("A bit", "Medium", "To much"))
fc$scale("description length",
type = "interval",
values = c(-1, 1, 4, 115),
interval_names = c("Any", "Medium", "To much"))
fc$get_scales(c("#posts", "#followers","#follows","description length"))
falsas
fc$get_scales(c("#posts", "#followers","#follows","description length"))
falsas
fc$get_scales(c("#posts", "#followers","#follows","description length"))
fc$find_implications()
fc$implications
fc$implications$filter(lhs= "private = 1")
fc$implications$filter(lhs= "#posts is To much, #follows is To much,
#followers is To much")
fc$concepts
fc$implications$filter("private")
fc$implications$filter(rhs = "private")
fc$implications$filter(lhs = "private")
fc$implications$filter(lhs = "name==username")
fc$implications$filter(rhs = "private")
fc$implications$filter(lhs = "description length is To much")
fc$implications$filter(lhs = "description length is Any")
summary(r1)
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
unique(falsas$`external URL`)
unique(falsas$private)
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
library(arules)
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
unique(falsas$`external URL`)
unique(falsas$private)
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
library(arules)
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
#Lo utilizo para determinar los rangos que ponerle al cut
summary(reglas$`#posts`)
fc$plot()
library(readr)
library(dplyr)
test <- read_csv("test.csv")
variables <- colnames(test)
variables
ifelse(sum(is.na(test)) == 0,"No hay valores NA","El dataset contiene valores NA")
falsas <- test %>% filter (fake == 1) %>% select(c(`profile pic`,`fullname words`,`name==username`,`description length`,`external URL`,`#posts`,`private`,`#follows`,`#followers`))
falsas
(nrow(falsas)/nrow(test))*100
summary(falsas$`fullname words`)
unique(falsas$`fullname words`)
(nrow(falsas %>% filter(`fullname words` == 0))/nrow(falsas))*100
(nrow(test %>% filter(`fullname words` == 0, fake == 0))/nrow(test %>% filter(fake == 0)))*100
summary(falsas$`#posts`)
unique(falsas$`#posts`)
unique((test %>% filter(fake == 0))$`#posts`)
summary(falsas$`#follows`)
summary(falsas$`#followers`)
unique(falsas$`#follows`)
unique(falsas$`#followers`)
falsas <- falsas %>%
mutate(ratio = ifelse(is.infinite(`#follows`/`#followers`),0,`#follows`/`#followers`))
falsas
summary(falsas$`ratio`)
summary(test %>%
filter(fake == 0) %>%
mutate(ratio = ifelse(is.infinite(`#follows`/`#followers`), 0,
`#follows`/`#followers`)) %>% select(ratio))
nrow(falsas %>% filter(private == 1))
library(ggplot2)
ggplot(falsas, aes(x = `description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot((test %>% filter(fake == 0)), aes(x = `description length`)) +
geom_density(fill = "skyblue", color = "black") +
ggtitle("Densidad de Longitud de Descripción")
ggplot(test, aes(x = factor(fake))) +
geom_bar(fill = c("skyblue", "pink"), color = "black") +
labs(x = "Verdaderas y Falsas", y = "Número de Perfiles") +
ggtitle("Cantidad de Perfiles Falsos y Verdaderos")
ggplot((test %>% filter(fake == 0)), aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 0.5) +
ggtitle("Relación entre Seguidores y Seguidos")
ggplot(falsas, aes(x = `#followers`, y = `#follows`)) +
geom_point(alpha = 0.5) +
ggtitle("Relación entre Seguidores y Seguidos")
library(arules)
unique(falsas$`external URL`)
unique(falsas$private)
reglas <- falsas %>% select(`profile pic`, `fullname words`, `name==username`, `description length`,`#posts`, `#follows`, `#followers`)
#Lo utilizo para determinar los rangos que ponerle al cut
summary(reglas$`#posts`)
reglas$`#posts`<- cut(reglas$`#posts`, breaks = c(-1, 1, 6, 82), labels = c("One or less", "Medium", "To much"))
#Lo utilizo para determinar los rangos que ponerle al cut
summary(reglas$`fullname words`)
reglas$`fullname words`<- cut(reglas$`fullname words`, breaks = c(-1, 1, 2,5), labels = c("Short", "A few", "To much"))
summary(reglas$`#follows`)
reglas$`#follows`<- cut(reglas$`#follows`, breaks = c(0, 160, 854, 7500), labels = c("A bit", "Medium", "To much"))
summary(reglas$`#followers`)
reglas$`#followers`<- cut(reglas$`#followers`, breaks = c(-1, 70, 230, 3000), labels = c("A bit", "Medium", "To much"))
reglas$`profile pic` <- ifelse(reglas$`profile pic` == 0, "No", "Sí")
reglas$`name==username` <- ifelse(reglas$`name==username` == 0, "No", "Sí")
reglas$`description length`<- ifelse(reglas$`description length` == 0, "No", "Sí")
reglas
reglas <- as(reglas, "transactions")
# Ejecutar algoritmo Apriori
r1 <- apriori(reglas, parameter = list(support = 0.1, confidence = 0.5))
r1
summary(r1)
library(fcaR)
fc <- FormalContext$new(falsas)
fc$scale("fullname words", type = "ordinal")
fc$get_scales("fullname words")
fc$scale("#posts",
type = "interval",
values = c(-1, 1, 6, 82),
interval_names = c("One or less", "Medium", "To much"))
fc$scale("#follows",
type = "interval",
values =  c(0, 160, 854, 7500),
interval_names = c("A bit", "Medium", "To much"))
fc$scale("#followers",
type = "interval",
values = c(-1, 70, 230, 3000),
interval_names = c("A bit", "Medium", "To much"))
fc$scale("description length",
type = "interval",
values = c(-1, 1, 4, 115),
interval_names = c("Any", "Medium", "To much"))
fc$get_scales(c("#posts", "#followers","#follows","description length"))
r1
View(r1)
inspect(head(r1))
r1 <- r1[which(!is.redundant(r1))]
inspect(head(r1))
reglas <- as(reglas, "transactions")
# Ejecutar algoritmo Apriori
r1 <- apriori(reglas, parameter = list(support = 0.1, confidence = 0.5))
r1
summary(r1)
inspect(head(r1))
which(!is.redundant(r1))
which(is.redundant(r1))
which(!is.redundant(r1))
r1 <- r1[which(!is.redundant(r1))]
which(is.redundant(r1))
inspect(head(r1))
inspect(head(r1[is.significant(r1, method = "fisher")]))
r7 <- apriori(titanic.raw,parameter = list(conf = 0.25, supp = 0.01))
r2 <- r1 %>% arrange(count)
r2 <- r1 %>% arrange(r1$count)
r2 <- r1 %>% arrange(support)
r2 <- sort(r1, by = "count")
inspect(head(r2,n=3))
inspect(head(r2,n=3))
inspect(head(r2,n=3))
r2 <- sort(r1, by = "support")
inspect(head(r2,n=1))
r2 <- sort(r1, by = "support", decreasing = FALSE)
inspect(head(r2,n=5))
inspect(head(r2,n=5))
r2 <- sort(r1, by = "support", decreasing = FALSE)
inspect(head(r2,n=5))
inspect(head(r2,n=3))
r2 <- sort(r1, by = "support", decreasing = FALSE)
inspect(head(r2,n=5))
r3 <- subset(r1,support > 0.75 & lift > 2.5)
inspect(head(r3))
r3 <- subset(r1,support > 0.75 & lift > 2.5)
inspect(head(r3))
inspect(head(r3))
r3
r3 <- subset(r1,support > 0.75 & lift > 2)
r3
r3 <- subset(r1,support > 0.7 & lift > 2)
r3
r3 <- subset(r1,support > 0.7 & lift > 1.5)
r3
r3 <- subset(r1,support > 0.6 & lift > 1.5)
r3
r3 <- subset(r1,support > 0.6 & lift > 1.2)
r3
r3 <- subset(r1,support > 0.6 & lift > 1)
r3
inspect(head(r3))
r3 <- subset(r1,support > 0.7 & lift > 1)
inspect(head(r3))
inspect(head(r3))
